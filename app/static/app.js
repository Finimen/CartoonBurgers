class MenuApp {
    constructor() {
        this.menuContainer = document.getElementById('menu-container');
        this.filters = document.querySelectorAll('.filter-btn');
        this.currentCategory = 'all';
        this.init();
    }

    init() {
        this.loadMenu();
        this.setupFilters();
    }

    async loadMenu() {
        try {
            this.showSkeleton(6); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 6 —Å–∫–µ–ª–µ—Ç–æ–Ω–æ–≤
            
            const response = await fetch('/api/menu');
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é');
            
            const products = await response.json();
            this.renderMenu(products);
        } catch (error) {
            console.error('Error:', error);
            this.menuContainer.innerHTML = `
                <div class="error">
                    <p>üòï –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é</p>
                    <button onclick="location.reload()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
                </div>
            `;
        }
    }

    showSkeleton(count) {
        this.menuContainer.innerHTML = Array(count).fill(`
            <div class="product-card skeleton"></div>
        `).join('');
    }

    renderMenu(products) {
        this.menuContainer.innerHTML = products.map(product => `
            <div class="product-card" data-category="${product.category}">
            <div class="product-image" style="background-image: url('/static/images/${product.id}.png')"></div>
            <h3>${product.name}</h3>
            <div class="price">${product.price} ‚ÇΩ</div>
            <div class="description">–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ: ${product.count} —à—Ç.</div>
            <button class="add-btn" data-id="${product.id}">
                –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
            </button>
        </div>
        `).join('');

        this.setupAddButtons();
    }

    setupAddButtons() {
        document.querySelectorAll('.add-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const productId = e.target.dataset.id;
                this.addToCart(productId);
            });
        });
    }

    setupFilters() {
        this.filters.forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.filters.forEach(b => b.classList.remove('active'));
                e.target.classList.add('active');
                
                this.currentCategory = e.target.textContent.toLowerCase();
                this.applyFilter();
            });
        });
    }

    applyFilter() {
        const cards = document.querySelectorAll('.product-card');
        
        cards.forEach(card => {
            if (this.currentCategory === '–≤—Å–µ' || this.currentCategory === 'all') {
                card.style.display = 'block';
            } else {
                const category = card.dataset.category;
                const shouldShow = this.getCategoryName(category) === this.currentCategory;
                card.style.display = shouldShow ? 'block' : 'none';
            }
        });
    }

    getCategoryName(categoryId) {
        const categories = {
            0: '–±—É—Ä–≥–µ—Ä—ã',
            1: '–∑–∞–∫—É—Å–∫–∏', 
            2: '–Ω–∞–ø–∏—Ç–∫–∏',
            3: '–¥–µ—Å–µ—Ä—Ç—ã'
        };
        return categories[categoryId] || '';
    }

    addToCart(productId) {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
        console.log('Adding to cart:', productId);
        
        // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        const btn = document.querySelector(`[data-id="${productId}"]`);
        btn.textContent = '‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ!';
        setTimeout(() => {
            btn.textContent = '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É';
        }, 2000);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    new MenuApp();
});